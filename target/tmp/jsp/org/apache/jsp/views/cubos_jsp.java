/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.7.v20170914
 * Generated at: 2022-05-19 20:24:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class cubos_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("file:/C:/Users/CDS/.m2/repository/org/apache/struts/struts2-core/2.5.14.1/struts2-core-2.5.14.1.jar", Long.valueOf(1652122940364L));
    _jspx_dependants.put("jar:file:/C:/Users/CDS/.m2/repository/org/apache/struts/struts2-core/2.5.14.1/struts2-core-2.5.14.1.jar!/META-INF/struts-tags.tld", Long.valueOf(1511966294000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fs_005fparam_0026_005fname;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fs_005fparam_0026_005fname = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue.release();
    _005fjspx_005ftagPool_005fs_005fparam_0026_005fname.release();
    _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
String context = request.getContextPath();
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"es\" ng-app=\"cubeStore\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Struts 2 y Angular JS</title>\r\n");
      out.write("    <link href=\"");
      out.print(context);
      out.write("/assets/css/bootstrap.css\" rel=\"stylesheet\">\r\n");
      out.write("    <script src=\"");
      out.print(context);
      out.write("/assets/js/angular.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(context);
      out.write("/assets/js/feather.js\"></script>\r\n");
      out.write("    <style>\r\n");
      out.write("        .overlay {\r\n");
      out.write("            opacity: 0;\r\n");
      out.write("            transition: .25s ease;\r\n");
      out.write("        }\r\n");
      out.write("        .cubeContainer:hover .overlay {\r\n");
      out.write("            opacity: 1;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div ng-controller=\"cubeController\">\r\n");
      out.write("    ");
      if (_jspx_meth_s_005finclude_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container my-4 my-md-5\">\r\n");
      out.write("        <div class=\"row g-4\">\r\n");
      out.write("            <div class=\"col-12\">\r\n");
      out.write("                <div class=\"card shadow-sm\">\r\n");
      out.write("                    <div class=\"card-body\">\r\n");
      out.write("                        <h5 class=\"card-title\">Cubos</h5>\r\n");
      out.write("                        <p class=\"card-text\">Esta es una página de prueba en la que se muestra el funcionamiento de una\r\n");
      out.write("                            aplicación web desarrollada en Struts.</p>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"col-12\">\r\n");
      out.write("                <div class=\"row g-3\">\r\n");
      out.write("                    <div class=\"col-12 col-sm-6 col-md-4 col-lg-3\" ng-repeat=\"cube in cubes\">\r\n");
      out.write("                        <div class=\"card shadow h-100 cubeContainer\">\r\n");
      out.write("                            <div class=\"card-header bg-primary text-white\">\r\n");
      out.write("                                <div class=\"row\">\r\n");
      out.write("                                    <div class=\"col\">\r\n");
      out.write("                                        <h5 class=\"m-0 align\">{{cube.sku}} {{cube.name}}</h5>\r\n");
      out.write("                                    </div>\r\n");
      out.write("                                    <div class=\"col-auto ms-auto\">\r\n");
      out.write("                                        <i ng-click=\"mostrarModificacion($index)\" role=\"button\" data-feather=\"edit\"></i>\r\n");
      out.write("                                        <i ng-click=\"mostrarEliminacion($index)\" role=\"button\" data-feather=\"trash-2\"></i>\r\n");
      out.write("                                    </div>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                            <div class=\"text-center position-relative\" style=\"height: 150px\">\r\n");
      out.write("                                <img ng-src=\"{{cube.image}}\" class=\"h-100 px-3 pt-3\">\r\n");
      out.write("                                <div class=\"position-absolute top-0 start-0 h-100 w-100 bg-white overlay\">\r\n");
      out.write("                                    <img ng-src=\"{{cube.image2}}\" class=\"h-100 px-3 pt-3\">\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                            <div class=\"card-body\">\r\n");
      out.write("                                <p class=\"card-text\">{{cube.description}}</p>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <button ng-click=\"showCubeRegister()\" class=\"btn btn-primary p-0\" style=\"width: 50px; height: 50px; border-radius: 25px; position: fixed; bottom: 40px; right: 40px;\">\r\n");
      out.write("        <div class=\"position-relative h-100 w-100\">\r\n");
      out.write("            <i class=\"align-middle position-absolute top-50 start-50 translate-middle\" style=\"width: 30px; height: 30px\" data-feather=\"plus\"></i>\r\n");
      out.write("        </div>\r\n");
      out.write("    </button>\r\n");
      out.write("    ");
      if (_jspx_meth_s_005finclude_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    ");
      if (_jspx_meth_s_005finclude_005f2(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    ");
      if (_jspx_meth_s_005finclude_005f3(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    ");
      if (_jspx_meth_s_005finclude_005f4(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    ");
      if (_jspx_meth_s_005finclude_005f5(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script src=\"");
      out.print(context);
      out.write("/assets/js/bootstrap.js\"></script>\r\n");
      out.write("<script>feather.replace()</script>\r\n");
      out.write("<script>\r\n");
      out.write("    const modalRegisterElement = document.getElementById('modalRegister')\r\n");
      out.write("    const modalUpdateElement = document.getElementById('modalUpdate')\r\n");
      out.write("    const modalDeleteElement = document.getElementById('modalDelete')\r\n");
      out.write("    const modalRegister = new bootstrap.Modal(modalRegisterElement, {})\r\n");
      out.write("    const modalUpdate = new bootstrap.Modal(modalUpdateElement, {})\r\n");
      out.write("    const modalDelete = new bootstrap.Modal(modalDeleteElement, {})\r\n");
      out.write("    loaderElement = document.getElementById('loader')\r\n");
      out.write("    const loader = new bootstrap.Modal(loaderElement, {backdrop: 'static', keyboard: false})\r\n");
      out.write("    const myAlert = new bootstrap.Toast('#alert', {delay: 3500})\r\n");
      out.write("\r\n");
      out.write("    const cubes = JSON.parse('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cubes}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("')\r\n");
      out.write("    const baseURL = '");
      out.print(context);
      out.write("/cubeapi/'\r\n");
      out.write("    const app = angular.module('cubeStore', [])\r\n");
      out.write("\r\n");
      out.write("    app.controller('cubeController', ($scope, $sce, $http, $timeout) => {\r\n");
      out.write("        $scope.error = {}\r\n");
      out.write("        $scope.validate = (form, input, values) => {\r\n");
      out.write("            if ($scope.error[input]) return $scope.error[input]\r\n");
      out.write("            if ($scope[form][input].$pristine && !$scope[form].$submitted) return ''\r\n");
      out.write("            const error = $scope[form][input].$error\r\n");
      out.write("            if (error.required) return 'Campo obligatorio.'\r\n");
      out.write("            if (error.number) return 'Ingresa un número valido.'\r\n");
      out.write("            if (error.datetimelocal) return 'Ingresa una fecha y hora válidas.'\r\n");
      out.write("            if (error.time) return 'Ingresa una hora válida.'\r\n");
      out.write("            if (error.date) return 'Ingresa una fecha válida.'\r\n");
      out.write("            if (error.week) return 'Ingresa una semana válida.'\r\n");
      out.write("            if (error.month) return 'Ingresa un mes válido.'\r\n");
      out.write("            if (error.max) return values.type && values.type === 'fecha' ? ('Ingresa una fecha que no sea posterior a ' + values.max + '.') : ('Ingresa un valor dentro del rango' + values.min && values.max ? (' (' + values.min + ' - ' + values.max + ')') : '' + '.')\r\n");
      out.write("            if (error.min) return values.type && values.type === 'fecha' ? ('Ingresa una fecha que no sea inferior a ' + values.min + '.') : ('Ingresa un valor dentro del rango' + values.min && values.max ? (' (' + values.min + ' - ' + values.max + ')') : '' + '.')\r\n");
      out.write("            if (error.maxLength) return values.max ? 'Máximo ' + values.max + ' carácteres.' : 'Has excedido el máximo de carácteres.'\r\n");
      out.write("            if (error.minLength) return values.max ? 'Mínimo ' + values.max + ' carácteres.' : 'No cumples con el mínimo de carácteres.'\r\n");
      out.write("            if (error.email) return 'Ingresa un correo válido.'\r\n");
      out.write("            if (error.pattern) return values.type ? ('Ingresa un' + values.gender || '' + ' ' + values.type + ' válid' + values.gender || '' + '.') : 'Ingresa un valor con el formato correcto.'\r\n");
      out.write("            if (error.url) return 'Ingresa una URL válida.'\r\n");
      out.write("            return ''\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        $scope.cubes = cubes\r\n");
      out.write("\r\n");
      out.write("        $scope.showCubeRegister = () => {\r\n");
      out.write("            $scope.infoModal = {}\r\n");
      out.write("            $scope.formCubeRegister.$setPristine()\r\n");
      out.write("            modalRegister.show()\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        $scope.showCubeUpdate = (index) => {\r\n");
      out.write("            $scope.infoModal = {...cubes[index]}\r\n");
      out.write("            $scope.formModificacion.$setPristine()\r\n");
      out.write("            modalModificacion.show()\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        $scope.showCubeDelete = (index) => {\r\n");
      out.write("            $scope.infoModal = {...cubes[index]}\r\n");
      out.write("            $scope.formEliminacion.$setPristine()\r\n");
      out.write("            modalEliminacion.show()\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        $scope.registerCube = async () => {\r\n");
      out.write("            if ($scope.formCubeRegister.$valid) {\r\n");
      out.write("                await new Promise(resolve => {\r\n");
      out.write("                    let finished = false\r\n");
      out.write("                    modalRegisterElement.addEventListener('hidden.bs.modal', () => {\r\n");
      out.write("                        if (finished) resolve()\r\n");
      out.write("                        else finished = true\r\n");
      out.write("                    })\r\n");
      out.write("                    loaderElement.addEventListener('shown.bs.modal', () => {\r\n");
      out.write("                        if (finished) resolve()\r\n");
      out.write("                        else finished = true\r\n");
      out.write("                    })\r\n");
      out.write("                    modalRegister.hide()\r\n");
      out.write("                    loader.show()\r\n");
      out.write("                })\r\n");
      out.write("                $http({\r\n");
      out.write("                    method: 'POST',\r\n");
      out.write("                    url: baseURL + 'registerCube',\r\n");
      out.write("                    data: {\r\n");
      out.write("                        cube: $scope.infoModal\r\n");
      out.write("                    }\r\n");
      out.write("                }).then(({data: res}) => {\r\n");
      out.write("                    if (!res.error) {\r\n");
      out.write("                        $scope.cubes.push({...$scope.infoModal})\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    loader.hide()\r\n");
      out.write("                    if (res.error) modalRegister.show()\r\n");
      out.write("\r\n");
      out.write("                    $scope.alertType = res.error ? 'danger' : 'success'\r\n");
      out.write("                    $scope.alertMessage = res.status\r\n");
      out.write("                    $scope.alertIcon = $sce.trustAsHtml(feather.icons[res.error ? 'alert-triangle' : 'check-circle'].toSvg() + '&nbsp;')\r\n");
      out.write("                    $timeout(() => {\r\n");
      out.write("                        myAlert.show()\r\n");
      out.write("                    })\r\n");
      out.write("                }, () => {\r\n");
      out.write("                    loader.hide()\r\n");
      out.write("                    $scope.alertType = 'danger'\r\n");
      out.write("                    $scope.alertMessage = 'No se pudo establecer conexión con el servidor.'\r\n");
      out.write("                    $scope.alertIcon = $sce.trustAsHtml(feather.icons['alert-triangle'].toSvg() + '&nbsp;')\r\n");
      out.write("                    $timeout(() => {\r\n");
      out.write("                        myAlert.show()\r\n");
      out.write("                    })\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    })\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_s_005finclude_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  s:include
    org.apache.struts2.views.jsp.IncludeTag _jspx_th_s_005finclude_005f0 = (org.apache.struts2.views.jsp.IncludeTag) _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue.get(org.apache.struts2.views.jsp.IncludeTag.class);
    try {
      _jspx_th_s_005finclude_005f0.setPageContext(_jspx_page_context);
      _jspx_th_s_005finclude_005f0.setParent(null);
      // /views/cubos.jsp(27,4) name = value type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_s_005finclude_005f0.setValue("/components/navbar.jsp");
      int _jspx_eval_s_005finclude_005f0 = _jspx_th_s_005finclude_005f0.doStartTag();
      if (_jspx_eval_s_005finclude_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        if (_jspx_eval_s_005finclude_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.pushBody();
          _jspx_th_s_005finclude_005f0.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
          _jspx_th_s_005finclude_005f0.doInitBody();
        }
        do {
          out.write("\r\n");
          out.write("        ");
          if (_jspx_meth_s_005fparam_005f0(_jspx_th_s_005finclude_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("    ");
          int evalDoAfterBody = _jspx_th_s_005finclude_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
        if (_jspx_eval_s_005finclude_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.popBody();
        }
      }
      if (_jspx_th_s_005finclude_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue.reuse(_jspx_th_s_005finclude_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_s_005fparam_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_s_005finclude_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  s:param
    org.apache.struts2.views.jsp.ParamTag _jspx_th_s_005fparam_005f0 = (org.apache.struts2.views.jsp.ParamTag) _005fjspx_005ftagPool_005fs_005fparam_0026_005fname.get(org.apache.struts2.views.jsp.ParamTag.class);
    try {
      _jspx_th_s_005fparam_005f0.setPageContext(_jspx_page_context);
      _jspx_th_s_005fparam_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_s_005finclude_005f0);
      // /views/cubos.jsp(28,8) name = name type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_s_005fparam_005f0.setName("actualPage");
      int _jspx_eval_s_005fparam_005f0 = _jspx_th_s_005fparam_005f0.doStartTag();
      if (_jspx_eval_s_005fparam_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        if (_jspx_eval_s_005fparam_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.pushBody();
          _jspx_th_s_005fparam_005f0.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
          _jspx_th_s_005fparam_005f0.doInitBody();
        }
        do {
          out.write("cubos");
          int evalDoAfterBody = _jspx_th_s_005fparam_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
        if (_jspx_eval_s_005fparam_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.popBody();
        }
      }
      if (_jspx_th_s_005fparam_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005fs_005fparam_0026_005fname.reuse(_jspx_th_s_005fparam_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_s_005finclude_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  s:include
    org.apache.struts2.views.jsp.IncludeTag _jspx_th_s_005finclude_005f1 = (org.apache.struts2.views.jsp.IncludeTag) _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody.get(org.apache.struts2.views.jsp.IncludeTag.class);
    try {
      _jspx_th_s_005finclude_005f1.setPageContext(_jspx_page_context);
      _jspx_th_s_005finclude_005f1.setParent(null);
      // /views/cubos.jsp(77,4) name = value type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_s_005finclude_005f1.setValue("/components/cubos/modalRegister.jsp");
      int _jspx_eval_s_005finclude_005f1 = _jspx_th_s_005finclude_005f1.doStartTag();
      if (_jspx_th_s_005finclude_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody.reuse(_jspx_th_s_005finclude_005f1);
    }
    return false;
  }

  private boolean _jspx_meth_s_005finclude_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  s:include
    org.apache.struts2.views.jsp.IncludeTag _jspx_th_s_005finclude_005f2 = (org.apache.struts2.views.jsp.IncludeTag) _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody.get(org.apache.struts2.views.jsp.IncludeTag.class);
    try {
      _jspx_th_s_005finclude_005f2.setPageContext(_jspx_page_context);
      _jspx_th_s_005finclude_005f2.setParent(null);
      // /views/cubos.jsp(78,4) name = value type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_s_005finclude_005f2.setValue("/components/cubos/modalUpdate.jsp");
      int _jspx_eval_s_005finclude_005f2 = _jspx_th_s_005finclude_005f2.doStartTag();
      if (_jspx_th_s_005finclude_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody.reuse(_jspx_th_s_005finclude_005f2);
    }
    return false;
  }

  private boolean _jspx_meth_s_005finclude_005f3(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  s:include
    org.apache.struts2.views.jsp.IncludeTag _jspx_th_s_005finclude_005f3 = (org.apache.struts2.views.jsp.IncludeTag) _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody.get(org.apache.struts2.views.jsp.IncludeTag.class);
    try {
      _jspx_th_s_005finclude_005f3.setPageContext(_jspx_page_context);
      _jspx_th_s_005finclude_005f3.setParent(null);
      // /views/cubos.jsp(79,4) name = value type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_s_005finclude_005f3.setValue("/components/cubos/modalDelete.jsp");
      int _jspx_eval_s_005finclude_005f3 = _jspx_th_s_005finclude_005f3.doStartTag();
      if (_jspx_th_s_005finclude_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody.reuse(_jspx_th_s_005finclude_005f3);
    }
    return false;
  }

  private boolean _jspx_meth_s_005finclude_005f4(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  s:include
    org.apache.struts2.views.jsp.IncludeTag _jspx_th_s_005finclude_005f4 = (org.apache.struts2.views.jsp.IncludeTag) _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody.get(org.apache.struts2.views.jsp.IncludeTag.class);
    try {
      _jspx_th_s_005finclude_005f4.setPageContext(_jspx_page_context);
      _jspx_th_s_005finclude_005f4.setParent(null);
      // /views/cubos.jsp(80,4) name = value type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_s_005finclude_005f4.setValue("/components/loader.jsp");
      int _jspx_eval_s_005finclude_005f4 = _jspx_th_s_005finclude_005f4.doStartTag();
      if (_jspx_th_s_005finclude_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody.reuse(_jspx_th_s_005finclude_005f4);
    }
    return false;
  }

  private boolean _jspx_meth_s_005finclude_005f5(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  s:include
    org.apache.struts2.views.jsp.IncludeTag _jspx_th_s_005finclude_005f5 = (org.apache.struts2.views.jsp.IncludeTag) _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody.get(org.apache.struts2.views.jsp.IncludeTag.class);
    try {
      _jspx_th_s_005finclude_005f5.setPageContext(_jspx_page_context);
      _jspx_th_s_005finclude_005f5.setParent(null);
      // /views/cubos.jsp(81,4) name = value type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_s_005finclude_005f5.setValue("/components/alert.jsp");
      int _jspx_eval_s_005finclude_005f5 = _jspx_th_s_005finclude_005f5.doStartTag();
      if (_jspx_th_s_005finclude_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005fs_005finclude_0026_005fvalue_005fnobody.reuse(_jspx_th_s_005finclude_005f5);
    }
    return false;
  }
}
